#!/usr/bin/env  bash
set -x
set -e


help()
{
	echo ""
	echo " uarmkimg - helper script to maintain usbarmory related stuff such as gnulinux rootfs/linux kernel/das u-boot loader"
	echo ""
	echo " * available actions:"
	echo ""
	echo "  setenv"
	echo "  setpkgs"
	echo "  download[=DIST[-VERSION]]"
	echo "  uboot[=VERSION]"
	echo "  linux[=VERSION]"
	echo "  rootfs=DIST[-VERSION]"
	echo "  image"
	echo "  ALL"
	
	echo ""
	echo " * samples:"
	echo ""
	echo "  setenv"
	echo "   - install required packages"
	echo ""
	echo "  uboot linux rootfs=fedora-23"
	echo "   - create dd-ready image with the latest versions of uboot and linux based on fedora 23 minimal rootfs"
	echo ""
	echo "  ALL"
	echo "   - make images using stable upstream versions of components"
	echo ""
	exit 0
}


usage()
{
	echo "usage"
	help
}


setenv()
{
	echo " ====>>>> setting environment $@ ..."
	if [ -z "${@}" ]; then
		conf="uarmkimg.conf"
	else
		test -r "${@}" || help
		conf="${@}"
	fi;
	source "${conf}" || help
	mkdir -p ${OUT}/{${BIN},${OBJ},${SRC},${DIST},${ROOT}}
	export CROSS_COMPILE=arm-linux-gnueabihf-
	export ARCH=arm
}


setpkgs()
{
	echo "setpkgs"
}


download()
{
	echo " ====>>>> downloading $@ ..."
	dist="${@%-*}"
	ver="${@#${dist}-*}"
	mkdir -p "${OUT}"/dist
	echo $fedora
	if [ -n "${dist}" ]; then
		if [ "${dist}" = "linux" ] && [ -n "${ver}" ]; then
			${GET} "https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-${ver}.tar.xz"
		else
			${GET} ${!dist}
		fi;
	else
		for d in ${COMPONENTS}; do
			${GET} ${d}
		done;
	fi;
}


_cpu() { echo $(($(cat /proc/cpuinfo | grep "processor" | wc -l)*2)); }


uboot()
{
	echo " ====>>>> preparing das u-boot bootloader ..."
	uboot_dist="`basename $(echo "${uboot}")`"
	test -f "${OUT}"/"${DIST}"/"${uboot_dist}" || download uboot
	uboot_dir="`tar -tf ${OUT}/${DIST}/\"${uboot_dist}\" --exclude=\"*/*\"`"
	uboot_path="${OUT}"/"${SRC}"/"${uboot_dir}"
	uboot_obj=$(pwd)/"${OUT}"/"${OBJ}"/"${uboot_dir}"
	mkdir -p "${OUT}"/"${SRC}"
	tar -xf "${OUT}"/"${DIST}"/"${uboot_dist}" -C "${OUT}"/"${SRC}"
	#sed  -i  's,bootargs_default=root=/dev/mmcblk0p1,bootargs_default=root=/dev/mmcblk0p1 rootfstype=ext4,'  ${uboot_path}/include/configs/usbarmory.h
	mkdir -p "${OUT}"/"${OBJ}"/"${uboot_dir}"
	make  -C ${uboot_path}  -j`_cpu`  distclean  mrproper
	make  -C ${uboot_path}  -j`_cpu`  KBUILD_OUTPUT="${uboot_obj}"  distclean
	make  -C ${uboot_path}  -j`_cpu`  KBUILD_OUTPUT="${uboot_obj}"  usbarmory_config
	make  -C ${uboot_path}  -j`_cpu`  KBUILD_OUTPUT="${uboot_obj}"  ARCH=arm
	cp  "${uboot_obj}/u-boot.imx"  "${OUT}/${BIN}/`basename ${uboot_dir}`.img"
}


linux()
{
	echo " ====>>>> preparing linux kernel ..."
	if [ -n "${@}" ]; then
		v="${@%_*}"
		t="${@#${v}_*}"
		if [ "${t}" = "kali" ] && [ -r configs/usbarmory_linux-${v}_kali.config ]; then
			ver=${v}
			cfg="${ver}_kali"
		else
			ver="${linux_version}"
			cfg=${ver}
		fi;
	fi;
	KVERSION="-1-usbarmory"
	DTS="imx53-usbarmory-dflt.dts imx53-usbarmory-gpio.dts imx53-usbarmory-host.dts imx53-usbarmory-i2c.dts imx53-usbarmory-spi.dts"
	DTB="`echo ${DTS} | sed 's,\.dts,\.dtb,g'`"
	debdist="wily"
	linux_dist="`basename $(echo "${linux}")`"
	test -f "${OUT}"/"${DIST}"/"${linux_dist}" || download linux-${ver}
	linux_dir="`tar -tf ${OUT}/${DIST}/\"${linux_dist}\" --exclude=\"*/*\"`"
	linux_path="${OUT}"/"${SRC}"/"${linux_dir}"
	linux_obj=$(pwd)/"${OUT}"/"${OBJ}"/"${linux_dir}"
	mkdir -p "${OUT}"/"${SRC}"
	test -d "${linux_path}" || tar -xf "${OUT}"/"${DIST}"/"${linux_dist}" -C "${OUT}"/"${SRC}"
	TOP="`pwd`"
	grep -q "usbarmory" "${linux_path}"/scripts/package/mkspec || ( cd "${linux_path}" && patch -p1 < "${TOP}"/patches/pkg.patch )
	cd "${TOP}"
	mkdir -p "${OUT}"/"${OBJ}"/"${linux_dir}"
	cp  configs/usbarmory_linux-${cfg}.config  "${OUT}"/"${OBJ}"/"${linux_dir}"/.config
	cp  configs/imx53-usbarmory-*.dts*  ${linux_path}/arch/arm/boot/dts/
	make  -j`_cpu`  -C ${linux_path}  O="${linux_obj}"  uImage      LOADADDR=0x70008000  LOCALVERSION=${KVERSION}  modules  ${DTB}
	make  -j`_cpu`  -C ${linux_path}  O="${linux_obj}"  bindeb-pkg  LOADADDR=0x70008000  LOCALVERSION=${KVERSION}  KBUILD_ARCH=arm  KBUILD_DTB="${DTB}"  KBUILD_IMGNAME=uImage  KBUILD_IMAGE=uImage  KBUILD_DEBARCH=armhf  KDEB_PKGVERSION=${ver}${KVERSION}  KDEB_CHANGELOG_DIST=${debdist}
	make  -j`_cpu`  -C ${linux_path}  O="${linux_obj}"  binrpm-pkg  LOADADDR=0x70008000  LOCALVERSION=${KVERSION}  KBUILD_ARCH=arm  KBUILD_DTB="${DTB}"  KBUILD_IMAGE="${TOP}"/"${OUT}"/"${OBJ}"/"${linux_dir}"/arch/arm/boot/uImage
	# TODO: update patch for package targets; update config 4.4.1; automate debdist detection
}


rootfs()
{
	echo "rootfs $@"
}


image()
{
	echo "image $@"
	# parse input
	# setenv
	# uboot
	# linux/linux kali
	# rootfs dist-version
}


clean()
{
	echo "clean"
	rm -rf "${OUT}"
}


### static

actions="help usage setenv setpkgs download uboot linux rootfs image clean ALL 0"


### main


test -z "${1}" && help


for cmdarg in $@; do
	for act in $actions; do
		cmd="${cmdarg%=*}"
		arg="${cmdarg#${cmd}=*}"
		if [ "${cmd}" = "${act}" ]; then
			break;
		fi;
	done;
	test "$act" = 0 && echo "ERROR: invalid command!" && help
done;

setenv

for cmdarg in $@; do
	cmd="${cmdarg%=*}"
	arg="${cmdarg#${cmd}=*}"
	if [ "${cmd}" = "${arg}" ]; then
		${cmd}
	else
		${cmd} ${arg}
	fi;
done;


