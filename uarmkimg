#!/usr/bin/env  bash
set -x
set -e


help()
{
	echo ""
	echo " uarmkimg - helper script to maintain usbarmory related stuff such as gnulinux rootfs/linux kernel/das u-boot loader"
	echo ""
	echo " * available actions:"
	echo ""
	echo "  setenv"
	echo "  setpkgs"
	echo "  download[=DIST[-VERSION]]"
	echo "  uboot[=VERSION]"
	echo "  linux[=VERSION]"
	echo "  rootfs=DIST[-VERSION]"
	echo "  image"
	echo "  ALL"
	
	echo ""
	echo " * samples:"
	echo ""
	echo "  setenv"
	echo "   - install required packages"
	echo ""
	echo "  uboot linux rootfs=fedora-23"
	echo "   - create dd-ready image with the latest versions of uboot and linux based on fedora 23 minimal rootfs"
	echo ""
	echo "  ALL"
	echo "   - make images using stable upstream versions of components"
	echo ""
	exit 0
}


usage()
{
	echo "usage"
	help
}


setenv()
{
	echo " ====>>>> setting environment $@ ..."
	if [ -z "${@}" ]; then
		conf="uarmkimg.conf"
	else
		test -r "${@}" || help
		conf="${@}"
	fi;
	source "${conf}" || help
	mkdir -p ${OUT}/{${BIN},${OBJ},${SRC},${DIST},${ROOT}}
	export CROSS_COMPILE=arm-linux-gnueabihf-
	export ARCH=arm
	export NCPU=9
}


setpkgs()
{
	echo "setpkgs"
}


download()
{
	echo " ====>>>> downloading $@ ..."
	dist="${@%-*}"
	ver="${@#${dist}-*}"
	mkdir -p "${OUT}"/dist
	echo $fedora
	if [ -n "${dist}" ]; then
		${GET} ${!dist}
	else
		for d in ${COMPONENTS}; do
			${GET} ${d}
		done;
	fi;
}


uboot()
{
	echo " ====>>>> preparing das u-boot bootloader ..."
	uboot_dist="`basename $(echo "${uboot}")`"
	test -f "${OUT}"/"${DIST}"/"${uboot_dist}" || download uboot
	uboot_dir="`tar -tf ${OUT}/${DIST}/\"${uboot_dist}\" --exclude=\"*/*\"`"
	uboot_path="${OUT}"/"${SRC}"/"${uboot_dir}"
	uboot_obj=$(pwd)/"${OUT}"/"${OBJ}"/"${uboot_dir}"
	mkdir -p "${OUT}"/"${SRC}"
	tar -xf "${OUT}"/"${DIST}"/"${uboot_dist}" -C "${OUT}"/"${SRC}"
	#sed  -i  's,bootargs_default=root=/dev/mmcblk0p1,bootargs_default=root=/dev/mmcblk0p1 rootfstype=ext4,'  ${uboot_path}/include/configs/usbarmory.h
	mkdir -p "${OUT}"/"${OBJ}"/"${uboot_dir}"
	make  -C ${uboot_path}  -j${NCPU}  distclean  mrproper
	make  -C ${uboot_path}  -j${NCPU}  KBUILD_OUTPUT="${uboot_obj}"  distclean
	make  -C ${uboot_path}  -j${NCPU}  KBUILD_OUTPUT="${uboot_obj}"  usbarmory_config
	make  -C ${uboot_path}  -j${NCPU}  KBUILD_OUTPUT="${uboot_obj}"  ARCH=arm
	cp  "${uboot_obj}/u-boot.imx"  "${OUT}/${BIN}/`basename ${uboot_dir}`.img"
}


linux()
{
	echo " ====>>>> preparing linux kernel ..."
	KVERSION="-1-usbarmory"
	DTB="imx53-usbarmory-dflt.dtb  imx53-usbarmory-host.dtb  imx53-usbarmory-gpio.dtb"
	linux_dist="`basename $(echo "${linux}")`"
	test -f "${OUT}"/"${DIST}"/"${linux_dist}" || download linux
	linux_dir="`tar -tf ${OUT}/${DIST}/\"${linux_dist}\" --exclude=\"*/*\"`"
	linux_path="${OUT}"/"${SRC}"/"${linux_dir}"
	linux_obj=$(pwd)/"${OUT}"/"${OBJ}"/"${linux_dir}"
	mkdir -p "${OUT}"/"${SRC}"
	tar -xf "${OUT}"/"${DIST}"/"${linux_dist}" -C "${OUT}"/"${SRC}"
	mkdir -p "${OUT}"/"${OBJ}"/"${linux_dir}"
	cp  configs/${version}  "${OUT}"/"${SRC}"/"${linux_dir}"/.config
	cp  configs/imx53-usbarmory-*.dts*  ${linux_dir}/arch/arm/boot/dts/
	make  -j${NCPU}  -C ${kernel_path}  O="${linux_obj}"  uImage  LOADADDR=0x70008000  LOCALVERSION=${KVERSION}  modules  ${DTB}
	# TODO: fix DTB, add VERSION detection, add pkg build
}


rootfs()
{
	echo "rootfs $@"
}


image()
{
	echo "image $@"
	# parse input
	# setenv
	# uboot
	# linux/linux kali
	# rootfs dist-version
}


clean()
{
	echo "clean"
	rm -rf "${OUT}"
}


### static

actions="help usage setenv setpkgs download uboot linux rootfs image clean ALL 0"


### main


test -z "${1}" && help


for cmdarg in $@; do
	for act in $actions; do
		cmd="${cmdarg%=*}"
		arg="${cmdarg#${cmd}=*}"
		if [ "${cmd}" = "${act}" ]; then
			break;
		fi;
	done;
	test "$act" = 0 && echo "ERROR: invalid command!" && help
done;

setenv

for cmdarg in $@; do
	cmd="${cmdarg%=*}"
	arg="${cmdarg#${cmd}=*}"
	if [ "${cmd}" = "${arg}" ]; then
		${cmd}
	else
		${cmd} ${arg}
	fi;
done;


